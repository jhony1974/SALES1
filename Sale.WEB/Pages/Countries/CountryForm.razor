@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>País</label>
        <div>
            <InputText class="form-control" @bind-Value="@Country.Name"/>
            <ValidationMessage For="@(() => Country.Name)" />
        </div>

    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambio></button>
    <button class="btn btn-succes" @onclick="ReturnAction">Regresar</button>

</EditForm>

@code {
    private EditContext editContext = null!;
    [Parameter]
    [EditorRequired]
    public Country Country { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Country);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMfied = editContext.IsModified();
        if (!formWasMfied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Deseas Abandonar la pagina y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "no",
                ConfirmButtonText = "si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if(confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
